@page "/user/statemanagement"

<PageTitle>System state</PageTitle>
<h1>System SessionStateManager</h1>

<h1 class="page-header">System States</h1>

<div class="container-fluid">
    <div class="row m-auto">
        <div class="col g-0 mb-4">
            @*Content here*@
            <p>
                <strong>Managing states in the system</strong> <br/>
                We manage states using a statecontainer located in <strong>SessionState</strong> -> <strong>SessionStateManager.cs</strong> <br/>
                <br/>
                <strong>UserID</strong>: contains the AAD reference of the logged in user<br/>
                <strong>Name</strong>: contains the AAD stored name of the logged in user<br/>
                <strong>UserName</strong>: contains the AAD stored UserName of the logged in user<br/>
                <strong>UserIsLoggedIn</strong>: indicates if the user has logged in, i.e. been authenticated and authorized<br/>
                <strong>UserIsLoggedInAsAdmin</strong>: indicates if the user is logged in as Admin<br/>
                <strong>RandomID</strong>: for illustration purposes of how to update a state from code<br/>
                <br/>
                The CascadingSessionState component must be added to any page that need access to states: <br/>
                <code>
                    [CascadingParameter] 
                    <br/>
                    CascadingSessionState CascadingSessionState { get; set; }
                </code><br/>
                <br/>
                Code for getting and setting current values are:<br/>
                <code>
                    @@CascadingSessionState.SessionState.UserId<br />
                    @@onclick="() => CascadingSessionState.StateManager.SetCurrentRandomId(Guid.NewGuid())"<br/>
                    @@onclick="() => CascadingSessionState.StateManager.AdminLogout()"<br/>
                </code>
            </p>
        </div>
    </div>
    <hr/>
    
    <AuthorizeView>
        <Authorized>
            <div class="row m-auto p-2">
                <div class="col g-0">
                    <strong>UserID</strong>
                </div>
                <div class="col square-2">
                    @CascadingSessionState.SessionState.UserId
                </div>
            </div>
    
            <div class="row m-auto p-2">
                <div class="col g-0">
                    <strong>Name</strong>
                </div>
                <div class="col square-2">
                    @CascadingSessionState.SessionState.Name
                </div>
            </div>
    
            <div class="row m-auto p-2">
                <div class="col g-0">
                    <strong>UserName</strong>
                </div>
                <div class="col square-2">
                    @CascadingSessionState.SessionState.UserName
                </div>
            </div>


            <div class="row m-auto p-2">
                <div class="col g-0">
                    <strong>UserIsLoggedIn</strong>
                </div>
                <div class="col square-2">
                    @CascadingSessionState.SessionState.UserIsLoggedIn
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div>
                <div class="text-primary">
                    <strong>Not Logged in</strong>

                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
    

    <div class="row m-auto p-2">
        <div class="col g-0">
            <strong>UserIsLoggedInAsAdmin</strong>
        </div>
        <div class="col g-0 square-2">
            @CascadingSessionState.SessionState.UserIsAdmin
        </div>
        <div class="col g-0 square-3">
            <SfButton @onclick="() => CascadingSessionState.StateManager.AdminLogin()">Click to set to true</SfButton>
            <SfButton @onclick="() => CascadingSessionState.StateManager.AdminLogout()">Click to set to false</SfButton>
        </div>
    </div>

    <div class="row m-auto p-2">
        <div class="col g-0">
            <strong>RandomID</strong>
        </div>
        <div class="col g-0 square-2">
            @CascadingSessionState.SessionState.RandomId
        </div>
        <div class="col g-0">
            <SfButton @onclick="() => CascadingSessionState.StateManager.SetCurrentRandomId(Guid.NewGuid())">Click for new random</SfButton>
            <SfButton @onclick="() => CascadingSessionState.StateManager.SetCurrentRandomId(Guid.Empty)">Click to clear</SfButton>
        </div>
    </div>
    <div class="row m-auto p-2">
        <div class="col g-0">
            <strong>Language</strong>
        </div>
        <div class="col g-0 square-2">
            @CascadingSessionState.SessionState.Language
        </div>
        <div class="col g-0">

        </div>
    </div>
</div>



@code {


    [CascadingParameter]
    CascadingSessionState CascadingSessionState { get; set; }
}