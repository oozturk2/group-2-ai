@page "/user/authentication"

<PageTitle>Authentication</PageTitle>

<h1 class="page-header">Authentication</h1>

<div class="container-fluid">
    <div class="row m-auto">
        <div class="col g-0 mb-4">
            <p class="">
                <strong>Azure AD & hosting</strong><br />
                The application implements an Authentication and Authorization model based on Azure AD. We authenticate against <strong>KPMG OnePlatform Tax ("OPT") Azure AD</strong>,
                no matter in which tenant the application is hosted. You may host your application in KPMG OnePlatform ("OP"), KPMG OnePlatform Tax ("OPT"), KPMG Country Hosting ("Country hosting")
                or KPMG CloudNext ("CloudNext"), but in any case we authenticate and authorize against OPT AAD.<br />
                <br />
                The advantage of authenticating and authorizing against OPT AAD are:<br />
                <ul>
                    <li>Other Tax & Legal applications also use OPT AAD, so there is a greater change of users already being provisioned</li>
                    <li>OPT AAD allows for federation to client ADs, and many of our global Tax & Legal clients are already federated</li>
                    <li>All of our application utilize the same AAD</li>
                </ul>
                <strong>Registering for an AppID</strong><br />
                In order to utilize OPT AAD, your application must be registered with an AppID in OPT AAD. This boilerplate project is registrered with AppID @Guid.NewGuid(), but any new clone of this
                boilerplate project must register for its own AppID.<br />
                <br />
                You register for an AppID by submitting a ServiceNow ticker here:<br />
                <a href="/">ServiceNow - Register appliation in OPT AAD</a><br />
                <br />
                You change the AppID in <strong>appsettings.json</strong>:<br />
                <pre>
                    "AzureB2C": {
                    "Instance": "https://login.microsoftonline.com/",
                    "Domain": "GOAZRSM01.onmicrosoft.com",
                    <mark>"ClientId": "b7e21900-bc6c-4a62-9777-61ff15dbe10a",</mark>
                    "TenantId": "8861fec2-5fa9-417f-9942-a80cef4ece87",
                    "CallbackPath": "/signin-oidc"
                    }
                </pre>
                "Domain": "GOAZRSM01.onmicrosoft.com" is the QA environment of OPT and should not be changed until your application is ready to go into Staging and later Production.<br />
                "TenantId": "8861fec2-5fa9-417f-9942-a80cef4ece87" is the OPT QA tenant and should not be changed until your application is ready to go into Staging and later Production.<br />
                "ClientId": "b7e21900-bc6c-4a62-9777-61ff15dbe10a" is your AppID.<br />
                <br />
                <strong>Infrastructure requirements</strong><br />
                On Azure your application must use XXXX. This forces any user of the application to member of an organizational unit ("OU") under the application in OPT AAD. If an user is not member of an OU, the user cannot authenticate.<br />
                <br />
                <strong>Mandatory OUs</strong><br />
                Each application must use a minimum of the following standard OUs in the authentication & authorization model:
                <ul>
                    <li><strong>Admin</strong>: KPMG users who have priviliged access to the application</li>
                    <li><strong>Internal users</strong>: KPMG users</li>
                    <li><strong>External users</strong>: non-KPMG users</li>
                </ul>
                Please note that a KPMG user is not automatically in the "Internal users" OU. You must add existing users to the OU using the Boilerplate projects admin page, or by raising a ticker in ServiceNow<br />
                <br />
                <strong>Autentication & Authorization method</strong><br />
                In <strong>Program.cs</strong> we invoke Microsoft.Identity.Web libraries, and call the functions
                for UseAuthentication and UseAuthorization:<br />
                <pre>
                    using Microsoft.Identity.Web;
                    using Microsoft.Identity.Web.UI;
                    ...
                        services.AddMicrosoftIdentityWebAppAuthentication(configuration);
                        services.AddAuthorization(options =>
                        {
                            options.FallbackPolicy = options.DefaultPolicy;  // This forces users to authenticate when visiting the application.
                        });
                        
                        services.AddRazorPages().AddMicrosoftIdentityUI();
                        
                        services.AddServerSideBlazor().AddMicrosoftIdentityConsentHandler();


                    ...

                    app.UseAuthentication();
                    app.UseAuthorization();
                </pre>
            </p>
        </div>
    </div>
</div>